#!/usr/bin/python2.7
import json
import sys
import time
import traceback
import functools

from spotify import cleanup, refresh_access_token, spotify_data

try:
    from hosted import config, node
except ImportError:
    print("Import error on hosted node.write_json")
    from hosted import Configuration, Node

    class Config(Configuration):
        def __init__(self):
            pass

    config = Config()

    class node(Node):
        @staticmethod
        def write_json(file, text):
            print(json.dumps(text, indent=4))
            with open("spotify.json.test", "w") as fp:
                json.dump(text, fp, indent=2)


POLL_INTERVAL = 5


class PollingException(Exception):
    pass


class Poll:
    def __init__(self, func, polling_rate=60, max_polling_rate=1000):
        functools.update_wrapper(self, func)
        self.func = func
        self.data = None
        self.initial_polling_rate = polling_rate
        self.polling_rate = polling_rate
        self.max_polling_rate = max_polling_rate
        self.last_result = 0

    def __call__(self, *args, **kwargs):
        now = time.time()
        if now - self.last_result < self.polling_rate:  # too early
            return self.data

        try:
            self.data = self.func(*args, **kwargs)
        except:
            self.polling_rate = max(self.polling_rate * 2, self.max_polling_rate)
            raise PollingException
        else:
            self.last_result = time.time()
            self.polling_rate = self.initial_polling_rate
        finally:
            return self.data


def main():
    config.restart_on_update()
    print("SPOTIFY: config updated")

    poll_cleanup = Poll(cleanup, polling_rate=600)

    accounts = [
        {
            "account_name": account["account_name"],
            "refresh_token": account["refresh_token"],
            "access_token": "",
            "market": account["market"],
            "poll_access_token": Poll(
                refresh_access_token, polling_rate=300, max_polling_rate=900
            ),
            "poll_spotify_data": Poll(
                spotify_data, polling_rate=POLL_INTERVAL, max_polling_rate=180
            ),
        }
        for account in config.accounts
    ]

    data = {account["account_name"]: "" for account in config.accounts}

    while True:
        try:
            poll_cleanup()

            for account in accounts:
                try:
                    account["access_token"] = account["poll_access_token"](
                        config.client_id, config.client_secret, account["refresh_token"]
                    )

                    data[account["account_name"]] = account["poll_spotify_data"](
                        account["access_token"], account["market"]
                    )
                except PollingException:
                    pass

            print("SPOTIFY", data)

            node.write_json("spotify.json", data)
        except:
            traceback.print_exc()
        finally:
            time.sleep(POLL_INTERVAL)


if __name__ == "__main__":
    main()
